//package com.api.twinme.auth2.repository
//
//import com.api.twinme.auth2.domain.User
//import com.api.twinme.entity.Provider
//import java.util.concurrent.atomic.AtomicLong
//
//class FakeUserRepository: UserRepository {
//
//    private val autoGeneratedId = AtomicLong(0)
//    private val data = arrayListOf<User>()
//
//    override fun findByHashedSub(
//        hashedSub: String
//    ): User? {
//        return data.find { it.hashedSub == hashedSub }
//    }
//
//    override fun findByHashedSubAndProvider(
//        hashedSub: String,
//        provider: Provider
//    ): User? {
//        return data.find {
//            it.hashedSub == hashedSub && it.provider == provider
//        }
//    }
//
//    override fun existsByHashedSubAndProvider(
//        hashedSub: String,
//        provider: Provider
//    ): Boolean {
//        return data.find { it.hashedSub == hashedSub && it.provider == provider }?.let { true } ?: false
//    }
//
//    override fun save(
//        user: User
//    ): User {
//        if (user.id == null || user.id == 0L) {
//            val newUser = User(
//                id = autoGeneratedId.incrementAndGet(),
//                provider = user.provider,
//                encryptedSub = user.encryptedSub,
//                hashedSub = user.hashedSub,
//                email = user.email,
//                nickname = user.nickname,
//                age = user.age
//            )
//            data.add(newUser)
//            return newUser
//        } else {
//            // update
//            if (user.id != null) {
//                data.removeIf {
//                    it.id!! == user.id
//                }
//                data.add(user)
//            }
//            return user
//        }
//    }
//
//}